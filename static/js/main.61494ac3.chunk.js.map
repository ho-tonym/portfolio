{"version":3,"sources":["MyProvider.js","components/utils/index.js","assets/data/projectInfo.js","components/overlayNav/useMeasure.js","components/TransitionOverlay/transitionOverlay.module.css","assets/images/donut.jpg","assets/images/pokedex.jpg","assets/images/sort.jpg","assets/images/donut/d1.png","assets/images/donut/d2.png","assets/images/sort/s1.png","assets/images/sort/s2.png","assets/images/sort/s3.png","assets/images/sort/s4.png","assets/images/pokedex/p1.png","assets/images/pokedex/p2.png","assets/images/pokedex/p3.png","assets/images/pokedex/p4.png","assets/images/pokedex/p5.png","assets/images/pokedex/p6.png","components/App/Preloader/Preloader.module.css","components/TransitionOverlay/index.js","components/App/Preloader/index.js","components/App/GoogleAnalytics/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["MyContext","createContext","MyProvider","props","useState","currentProj","setProj","showOverlayNav","toggleOverlayNav","overlayTextShowing","isOverlayTextShowing","lineHeight","setLineHeight","transOverlay","setTrans","copied","setCopied","overlay","rLinks","title","mainImg","lineColor","animValue","setAnimValue","svgNumber","setSvgNumber","weAreTransitioning","toggleTransition","Provider","value","children","useStateValue","useContext","titleAnimTime","preloaderAnim","copyAnimTime","numSvgAnim","firstDelay","secondDelay","numConfig","mass","tension","friction","easing","easings","duration","homeToProjectAnim","imageDelay","doneDelay","imageConfig","overLayAnim","showTextDelay","closeOverlayDelay","secondZeroSvgConfig","myConfig","nameArray","name","backgroundColor","alt","src","sort","link","firstImages","pic","pic3Sort","pic4Sort","secondImages","pic1Sort","pic2Sort","colorsArray","description","githubLink","hostLink","pokedex","pic1Poke","pic2Poke","pic3Poke","pic4Poke","pic5Poke","pic6Poke","donut","pic1Donut","pic2Donut","useMeasure","ref","useRef","left","top","width","height","bounds","set","ResizeObserver","entry","contentRect","ro","useEffect","observe","current","disconnect","module","exports","TransitionOverlay","projectInfo","bind","animProps","useSpring","div","style","className","styles","transitionOverlay","Preloader","location","useLocation","currentTitle","setTitle","isBlack","setIsBlack","colorStyle","titleAnimation","useCallback","map","clearTimeout","push","setTimeout","pathname","transitions","useTransition","config","from","transform","enter","leave","preloader","item","key","h1","GoogleAnalytics","ReactGA","initialize","FixedUI","lazy","OverlayNav","Routes","Promise","all","resolve","then","App","basename","process","fallback","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61494ac3.chunk.js","sourcesContent":["import React, { useState, useContext, createContext } from 'react';\n\nexport const MyContext = createContext();\nexport const MyProvider = (props) => {\n  const [currentProj, setProj] = useState(0)\n  const [showOverlayNav, toggleOverlayNav] = useState(false)\n  const [overlayTextShowing, isOverlayTextShowing] = useState(false)\n  const [lineHeight, setLineHeight] = useState(1)\n  const [transOverlay, setTrans] = useState(true)\n  const [copied, setCopied] = useState(false)\n  const [animValue, setAnimValue] = useState({\n    overlay: false,\n    rLinks: false,\n    lineHeight: 1,\n    title: [],\n    mainImg: true,\n    lineColor: 'white'\n  })\n\tconst [svgNumber, setSvgNumber] = useState([])\n  const [weAreTransitioning, toggleTransition] = useState(false)\n  return (\n    <MyContext.Provider\n      value={{\n        currentProj,\n        setProj,\n        showOverlayNav,\n        toggleOverlayNav,\n        lineHeight,\n        setLineHeight,\n        animValue,\n        setAnimValue,\n        overlayTextShowing,\n        isOverlayTextShowing,\n        svgNumber,\n        setSvgNumber,\n        transOverlay,\n        setTrans,\n        weAreTransitioning,\n        toggleTransition,\n        copied,\n        setCopied\n      }}\n    >\n      {props.children}\n    </MyContext.Provider>\n  )\n}\n\nexport const useStateValue = () => useContext(MyContext)\n","import * as easings from 'd3-ease'\n\nexport const titleAnimTime = 1000\nexport const preloaderAnim = 4000 // 0\nexport const copyAnimTime = 1500\nconst numSvgAnimFirst = 1300\nexport const numSvgAnim = {\n  firstDelay: numSvgAnimFirst,\n  secondDelay: 1400, // has to be a bit after numSvgAnimTime\n  numConfig: {\n    mass: 1,\n    tension: 300,\n    friction: 60,\n    easing: easings.easeCubicInOut,\n    duration: numSvgAnimFirst, // same as firstDelay\n  },\n}\n\nexport const homeToProjectAnim = {\n  imageDelay: 500,\n  doneDelay: 2500,\n  imageConfig: {\n    mass: 1,\n    tension: 300,\n    friction: 60,\n    easing: easings.easeCubicInOut,\n    duration: 1200,\n  },\n}\n\nexport const overLayAnim = {\n  showTextDelay: 700,\n  closeOverlayDelay: 700,\n}\n\nexport const secondZeroSvgConfig = {\n  mass: 1,\n  tension: 300,\n  friction: 60,\n  easing: easings.easeCubicInOut,\n  duration: 900,\n}\n\nexport const myConfig = { // about 1 second\n  mass: 1,\n  tension: 300,\n  friction: 60,\n}\n","import donut from \"../images/donut.jpg\"\nimport pokedex from \"../images/pokedex.jpg\"\nimport sort from \"../images/sort.jpg\"\n\nimport pic1Donut from \"../images/donut/d1.png\"\nimport pic2Donut from \"../images/donut/d2.png\"\n\nimport pic1Sort from \"../images/sort/s1.png\"\nimport pic2Sort from \"../images/sort/s2.png\"\nimport pic3Sort from \"../images/sort/s3.png\"\nimport pic4Sort from \"../images/sort/s4.png\"\n\nimport pic1Poke from \"../images/pokedex/p1.png\"\nimport pic2Poke from \"../images/pokedex/p2.png\"\nimport pic3Poke from \"../images/pokedex/p3.png\"\nimport pic4Poke from \"../images/pokedex/p4.png\"\nimport pic5Poke from \"../images/pokedex/p5.png\"\nimport pic6Poke from \"../images/pokedex/p6.png\"\n\nexport default\n[\n  {\n    nameArray: [\"sort\", \"visualizer.\"],\n    name: \"visualizer.\",\n    backgroundColor : \"#A7C6C1\",\n    alt: \"visualizer pic\",\n    src: sort,\n    link: \"projects/visualizer\",\n    firstImages:[\n      {\n        alt: \"sorting image 1\",\n        pic: pic3Sort\n      },\n      {\n        alt: \"sorting image 2\",\n        pic: pic4Sort\n      }\n    ],\n    secondImages:[\n      {\n        alt: \"sorting image 3\",\n        pic: pic1Sort\n      },\n      {\n        alt: \"sorting image 4\",\n        pic: pic2Sort\n      }\n    ],\n    colorsArray: [[\"#fff\", \"#2f2f2f\", \"#017aff\", \"#636363\", \"#ff9f38\", \"#ff6e8d\"]],\n    description: \"This app was a way for me to learn more about sorting algorithms and help others understand the differences between some of the more popular ones. Feel free to play around with it!\",\n    githubLink:\"https://github.com/ho-tonym/sorting-visualizer\",\n    hostLink:\"https://ho-tonym.github.io/sorting-visualizer/\"\n  },\n  {\n    nameArray: [\"pokedex.\"],\n    name: \"pokedex.\",\n    backgroundColor : \"#D0BE9D\",\n    alt: \"pokemon pic\",\n    src: pokedex,\n    link: \"projects/pokedex\",\n    firstImages:[\n      {\n        alt: \"pokedex image 1\",\n        pic: pic1Poke\n      },\n      {\n        alt: \"pokedex image 2\",\n        pic: pic2Poke\n      },\n      {\n        alt: \"pokedex image 3\",\n        pic: pic3Poke\n      }\n    ],\n    secondImages:[\n      {\n        alt: \"pokedex image 4\",\n        pic: pic4Poke\n      },\n      {\n        alt: \"pokedex image 5\",\n        pic: pic5Poke\n      },\n      {\n        alt: \"pokedex image 6\",\n        pic: pic6Poke\n      }\n    ],\n    colorsArray: [\n      [\"#fff\", \"#fafafa\", \"#f4f4f4\", \"#dddddd\"],\n      [\"#707070\", \"#9e9e9e\", \"#696969\", \"#444444\"],\n      [\"#9acff7\", \"#8accff\", \"#55acee\", \"#6FC6FF\", \"#3C93D5\"],\n      [\"#11bd0e\",\"#e04b4b\"]\n    ],\n    description: \"The purpose of this app is for convenient comparisons of your pokemon against certain matchups to determine your best lineup. Specifically for Pokemon Go.\",\n    githubLink:\"https://github.com/ho-tonym/pokedex\",\n    hostLink:\"https://sheltered-taiga-80254.herokuapp.com/\"\n  },\n  {\n    nameArray: [\"donuts.\"],\n    name: \"donuts.\",\n    backgroundColor : \"#E0AFAF\",\n    alt: \"donut pic\",\n    src: donut,\n    link: \"projects/donuts\",\n    firstImages:[],\n    secondImages:[\n      {\n        alt: \"donut image 3\",\n        pic: pic1Donut\n      },\n      {\n        alt: \"donut image 4\",\n        pic: pic2Donut\n      }\n    ],\n    colorsArray: [\n      [\"#fff\", \"#eee\", \"#ddd\"],\n      [\"#B0B0B0\", \"#666\", \"#282936\", \"#333\"],\n      [\"#ED6B74\", \"#37dacb\", \"#a78be8\"],\n      [\"#00d2ff\", \"#3a7bd5\"]\n    ],\n    description: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n    githubLink:\"https://github.com/ho-tonym/donutproductpage\",\n    hostLink:\"https://ho-tonym.github.io/donutproductpage/\"\n  }\n]\n","import { useRef, useState, useEffect } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nexport default function useMeasure() {\n  const ref = useRef()\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 })\n  const [ro] = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)))\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => (ro.observe(ref.current), ro.disconnect), [])\n  return [{ ref }, bounds]\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transitionOverlay\":\"transitionOverlay_transitionOverlay__3vDao\"};","module.exports = __webpack_public_path__ + \"static/media/donut.4d35933e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pokedex.22ceb310.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sort.bb5813d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/d1.257a7315.png\";","module.exports = __webpack_public_path__ + \"static/media/d2.0f9a7484.png\";","module.exports = __webpack_public_path__ + \"static/media/s1.7b221fdf.png\";","module.exports = __webpack_public_path__ + \"static/media/s2.5a7ba98b.png\";","module.exports = __webpack_public_path__ + \"static/media/s3.470507a7.png\";","module.exports = __webpack_public_path__ + \"static/media/s4.f03e7c52.png\";","module.exports = __webpack_public_path__ + \"static/media/p1.69a29417.png\";","module.exports = __webpack_public_path__ + \"static/media/p2.15ee0101.png\";","module.exports = __webpack_public_path__ + \"static/media/p3.8bf94465.png\";","module.exports = __webpack_public_path__ + \"static/media/p4.0a9cc59b.png\";","module.exports = __webpack_public_path__ + \"static/media/p5.3439736e.png\";","module.exports = __webpack_public_path__ + \"static/media/p6.6be4ac60.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__vA6mX\"};","import React from 'react'\nimport { useSpring, animated } from 'react-spring'\nimport styles from './transitionOverlay.module.css'\nimport useMeasure from '../overlayNav/useMeasure'\nimport { useStateValue } from '../../MyProvider'\nimport projectInfo from '../../assets/data/projectInfo'\n\nconst TransitionOverlay = () => {\n  const { currentProj, transOverlay } = useStateValue();\n  const { backgroundColor,\n  } = projectInfo[currentProj]\n\n  const [bind] = useMeasure()\n  const animProps = useSpring({ height: transOverlay ? '100%' : '0%' })\n  return (\n    <animated.div {...bind}\n      style={{ ...animProps, backgroundColor }}\n      className={styles.transitionOverlay}\n    />\n  )\n}\n\nexport default TransitionOverlay\n","import React, { useRef, useCallback, useState, useEffect } from 'react'\nimport { animated, useTransition } from 'react-spring'\nimport { useLocation } from 'react-router-dom'\nimport styles from './Preloader.module.css'\nimport { homeToProjectAnim } from '../../utils'\nimport projectInfo from '../../../assets/data/projectInfo'\nimport { useStateValue } from '../../../MyProvider'\n\nconst Preloader = () => {\n  const location = useLocation();\n  const { currentProj, setSvgNumber, setTrans } = useStateValue();\n  const [currentTitle, setTitle] = useState('')\n  const ref = useRef([])\n  const [isBlack, setIsBlack] = useState(true)\n  const { backgroundColor } = projectInfo[currentProj]\n  const colorStyle = { backgroundColor: isBlack ? '#000' : backgroundColor }\n\n  const titleAnimation = useCallback(() => {\n    ref.current.map(clearTimeout)\n    ref.current = []\n    ref.current.push(setTimeout(() => setTitle('TONY HO'), 500))// brings it back- (delay)when to bring it back\n    ref.current.push(setTimeout(() => setTitle(''), 2700))// brings it back- (delay)when to bring it back\n    setTimeout(() => setIsBlack(false), 2700) // 4000 total\n  }, [])\n\n  useEffect(() => {\n    titleAnimation()\n    return () => {\n      if (location.pathname === '/') {\n        setSvgNumber(['1'])\n      }\n      setTrans(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n\n  const transitions = useTransition(currentTitle, null, {\n    config: homeToProjectAnim.imageConfig,\n    from: { transform: 'translate3d(0px, 100%, 0px)' },\n    enter: { transform: 'translate3d(0px, 0%, 0px)' },\n    leave: { transform: 'translate3d(0px, -100%, 0px)' },\n  })\n\n  return(\n    <div className={styles.preloader} style={colorStyle}>\n      <span>\n        {transitions.map(({ item: title, props, key }) => (\n          <animated.h1 style={{ ...props }} key={key}>\n            {title}\n          </animated.h1>\n        ))}\n      </span>\n    </div>\n  )\n}\n\nexport default Preloader\n","import React, { useEffect } from 'react';\nimport ReactGA from 'react-ga';\n\nconst trackingId = \"UA-151451202-1\"; // Replace with your Google Analytics tracking ID\n\nconst GoogleAnalytics = () => {\n  useEffect(() => {\n    ReactGA.initialize(trackingId);\n  },[])\n  return <></>\n}\n\nexport default GoogleAnalytics\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { MyProvider } from '../../MyProvider'\nimport TransitionOverlay from '../TransitionOverlay'\nimport { preloaderAnim } from '../utils'\nimport Preloader from './Preloader'\nimport GoogleAnalytics from './GoogleAnalytics'\n\nconst FixedUI = lazy(() => import('../FixedUI'))\nconst OverlayNav = lazy(() => import('../overlayNav'))\nconst Routes = lazy(() => (\n  Promise.all([\n    import('./routes'),\n    new Promise(resolve => setTimeout(resolve, preloaderAnim)),\n  ])\n  .then(([moduleExports]) => moduleExports)\n))\n\nfunction App() {\n  return (\n    <MyProvider>\n      <Router basename={process.env.PUBLIC_URL}>\n        <TransitionOverlay />\n        <Suspense\n          fallback={(\n            <Preloader />\n          )}\n        >\n          <GoogleAnalytics />\n          <FixedUI />\n          <OverlayNav />\n          <Routes />\n        </Suspense>\n      </Router>\n    </MyProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}